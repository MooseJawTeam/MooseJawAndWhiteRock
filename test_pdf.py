import os
import django
import subprocess
import uuid
import json
from django.conf import settings

# Set up Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "moosejawums.settings")
django.setup()

# Import models
from pdfdocs.models import DocumentTemplate, GeneratedDocument, DocumentSignature
from ums.models import Users

# Get or create test user
user, created = Users.objects.get_or_create(
    id='test123',
    defaults={
        'name': 'Test User',
        'email': 'test@example.com',
        'role': 'admin',
        'status': 'Active'
    }
)

print(f"Using user: {user.name} (ID: {user.id})")

# Create a test template
latex_content = r"""
\documentclass[12pt]{article}
\usepackage[a4paper, margin=1in]{geometry}
\usepackage{graphicx}
\usepackage{xcolor}

% Document signature information
% These will be replaced with actual values during generation
\newcommand{\documentid}{document_id_placeholder}
\newcommand{\documenttitle}{document_title_placeholder}
\newcommand{\username}{user_name_placeholder}
\newcommand{\useremail}{user_email_placeholder}
\newcommand{\generationdate}{generation_date_placeholder}
\newcommand{\customtext}{custom_text_placeholder}

\begin{document}

\begin{center}
    {\Large\textbf{\documenttitle}}
    \vspace{0.5cm}
    
    {\large\textbf{Test Document}}
    \vspace{1cm}
\end{center}

\noindent\rule{\linewidth}{1pt}
\vspace{0.5cm}

\noindent\textbf{Document ID:} \documentid\\
\noindent\textbf{Generated:} \generationdate\\
\noindent\textbf{Created By:} \username\\
\noindent\textbf{Email:} \useremail

\vspace{1cm}

\begin{center}
    \fbox{\parbox{0.9\textwidth}{\customtext}}
\end{center}

\end{document}
"""

template, created = DocumentTemplate.objects.get_or_create(
    name="Test Template",
    defaults={
        'description': "A simple test template",
        'latex_content': latex_content
    }
)

if not created:
    print(f"Using existing template: {template.name}")
else:
    print(f"Created new template: {template.name}")

# Generate a PDF
def generate_pdf(template, context_data, output_path):
    """Generate PDF using LaTeX and provided context data"""
    # Create a temporary directory
    temp_dir = f"/tmp/latex_{uuid.uuid4()}"
    os.makedirs(temp_dir, exist_ok=True)
    
    # Create LaTeX file with context data inserted
    latex_with_context = template.latex_content
    # Fix the placeholders in the LaTeX content
    for key, value in context_data.items():
        placeholder = f"{key}_placeholder"
        latex_with_context = latex_with_context.replace(placeholder, str(value))
    
    tex_file = os.path.join(temp_dir, "document.tex")
    with open(tex_file, 'w') as f:
        f.write(latex_with_context)
    
    # Run pdflatex to generate PDF
    try:
        subprocess.run(["pdflatex", "-interaction=nonstopmode", 
                        "-output-directory", temp_dir, tex_file], 
                       check=True, capture_output=True)
        
        # Move the PDF to the destination
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        pdf_file = os.path.join(temp_dir, "document.pdf")
        if os.path.exists(pdf_file):
            os.rename(pdf_file, output_path)
            print(f"PDF generated successfully: {output_path}")
            return True
        else:
            print(f"PDF file not found: {pdf_file}")
            return False
    except subprocess.CalledProcessError as e:
        print(f"Error generating PDF: {e}")
        print(f"STDOUT: {e.stdout.decode()}")
        print(f"STDERR: {e.stderr.decode()}")
        return False
    finally:
        # Clean up auxiliary files (but keep the directory for inspection if needed)
        for ext in ['.aux', '.log', '.out']:
            aux_file = os.path.join(temp_dir, f"document{ext}")
            if os.path.exists(aux_file):
                os.remove(aux_file)

# Context data for the document
context_data = {
    'document_id': str(uuid.uuid4()),
    'document_title': "Test Document",
    'user_name': user.name,
    'user_email': user.email,
    'generation_date': "2025-03-18",
    'custom_text': "This is a test document generated by the PDF generation system."
}

# Generate unique filename
filename = f"{uuid.uuid4()}.pdf"
output_path = os.path.join('media', 'pdfs', filename)
full_path = os.path.join(settings.BASE_DIR, output_path)

# Generate the document
success = generate_pdf(template, context_data, full_path)

if success:
    # Save document in database
    document = GeneratedDocument.objects.create(
        title="Test Document",
        template=template,
        created_by=user,
        file_path=output_path,
        context_data=context_data
    )
    
    print(f"Document created in database with ID: {document.id}")
    print(f"You can view the PDF at: {full_path}")
else:
    print("Failed to generate PDF document")